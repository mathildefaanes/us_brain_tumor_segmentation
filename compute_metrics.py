import seg_metrics.seg_metrics as sg
import pandas as pd
import numpy as np

def calc_metrics():
    '''
    To calculate pixel-wise metrics for the predictions. A csv-file will be saved with the results.

    '''

    gdth = "/PATH_TO_GROUND_TRUTH"
    pred = "/PATH_TO_PREDICTIONS"
    csv_file = ('/PATH_TO/results_xxx.csv')
    metrics = sg.write_metrics(labels=[1],  # exclude background
                               gdth_path=gdth,
                               pred_path=pred,
                               csv_file=csv_file,
                               TPTNFPFN=True)

# calc_metrics()

def get_results_from_csv(results_file, name):
    '''
    To print results from the results-file generated by calc_metrics().
    It computes average values with standard deviation for Dice, Precision, Recall, HD95, Area Similarity (AS) and FNR

    :param results_file: "/PATH_TO/results_xxx.csv"
    :param name: experiment name

    '''

    data = pd.read_csv(results_file)
    dice = data["dice"]
    precision = data["precision"]
    recall = data["recall"]
    fnr = data["fnr"]
    positive_pred = data[(data["TP"] != 0) | (data["FP"] != 0)]
    negative_pred = data[(data["TP"] == 0) & (data["FP"] == 0)]
    area_sim = abs(positive_pred["vs"])
    hd95 = positive_pred["hd95"]

    print("#########################################")
    print("Results for ", name)
    print("Number of test cases: ", len(data))
    print("Number of positive predictive cases: ", len(positive_pred))
    print("Number of negative predictive cases: ", len(negative_pred))
    print("Dice: ", round(np.average(dice),3), "+-", round(np.std(dice),3))
    print("Precision: ", round(np.average(precision),3), "+-", round(np.std(precision),3))
    print("Recall: ", round(np.average(recall),3), "+-", round(np.std(recall),3))
    print("HD95: ", round(np.average(hd95), 3), "+-", round(np.std(hd95),3))
    print("AS: ", round(np.average(area_sim), 3), "+-", round(np.std(area_sim),3))
    print("FNR: ", round(np.average(fnr), 3), "+-", round(np.std(fnr),3))
    print("#########################################")

# get_results_from_csv('/PATH_TO/results_xxx.csv', 'experiment name')




